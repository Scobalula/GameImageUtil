// ------------------------------------------------------------------------
// GameImageUtil - Tool to process game images
// Copyright (C) 2020 Philip/Scobalula
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------
using System;
using System.IO;
using System.Numerics;
using PhilLibX;
using PhilLibX.Imaging;

namespace GameImageUtil
{
    /// <summary>
    /// A class to handle reconstructing Z component of a BC5 XY normal map
    /// </summary>
    public class BC5XYNormalMapProcessor : IFileProcessor
    {
        /// <summary>
        /// Gets the ID of this Processor
        /// </summary>
        public string ID { get { return "BC5XYNormalMapProcessor"; } }

        /// <summary>
        /// Gets the Name of this Processor
        /// </summary>
        public string Name { get { return "XY Normal Map (BC5 Grey/Yellow w/ No Alpha) (Modern Games/Global)"; } }

        /// <summary>
        /// Processes the provided image
        /// </summary>
        /// <param name="file">File to process</param>
        /// <param name="config">Config with settings</param>
        public void Process(string file, FileProcessorConfig config)
        {
            if(!config.ViewModel.Extensions.Contains(Path.GetExtension(file).ToUpper()))
                return;

            using (var image = new ScratchImage(file))
            {
                var ext = config.GetValue("Extension", ".PNG");
                var dxgi = config.GetValue("DXGIFormat", 77);
                var outputPath = config.GetValue("OutputPath", "");

                if(string.IsNullOrWhiteSpace(outputPath))
                    outputPath = Path.Combine(Path.GetDirectoryName(file), Path.GetFileNameWithoutExtension(file));

                // Force the image to a standard format
                image.ConvertImage(ScratchImage.DXGIFormat.R8G8B8A8UNORM);

                for (int x = 0; x < image.Width; x++)
                {
                    for (int y = 0; y < image.Height; y++)
                    {
                        // Get Pixel
                        var pixel = image.GetPixel(0, 0, 0, x, y);

                        var nX = pixel.X * 2.0f - 1.0f;
                        var nY = pixel.Y * 2.0f - 1.0f;

                        var dot1 = 1.0f - (nX * nX) - (nY * nY);
                        var nZ = dot1 > 0 ? (float)Math.Sqrt(dot1) : 0.0f;

                        image.SetPixel(0, 0, 0, x, y, new Vector4(nX * 0.5f + 0.5f, nY * 0.5f + 0.5f, MathUtilities.Clamp(nZ * 0.5f + 0.5f, 1.0f, 0.0f), 1.0f));
                    }
                }

                if (ext == ".dds")
                    image.ConvertImage((ScratchImage.DXGIFormat)dxgi);

                image.Save(outputPath + ext);
            }
        }

        /// <summary>
        /// Checks if we can process this file, this is used by the Automatic Processor and does not affect manually selected modes
        /// </summary>
        /// <param name="file">File to process</param>
        /// <param name="config">Config with settings</param>
        /// <returns>True if we can, otherwise False</returns>
        public bool CanProcessFile(string file, FileProcessorConfig config)
        {
            if(!config.ViewModel.Extensions.Contains(Path.GetExtension(file).ToUpper()))
                return false;

            return false;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            return Name;
        }
    }
}