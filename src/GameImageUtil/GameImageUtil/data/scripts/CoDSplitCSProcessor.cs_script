// ------------------------------------------------------------------------
// GameImageUtil - Tool to process game images
// Copyright (C) 2020 Philip/Scobalula
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------
using System;
using System.IO;
using System.Numerics;
using PhilLibX;
using PhilLibX.Imaging;

namespace GameImageUtil
{
    /// <summary>
    /// A class to handle processing CoD CS Images (World War II)
    /// They are stored as follows:
    ///     Fused Diffuse/Specular Color
    ///     Metalness Mask
    /// References:
    ///     https://www.activision.com/cdn/research/2017_DD_Rendering_of_COD_IW.pdf
    ///     RenderDoc for Shader Debugging
    /// </summary>
    public class CoDSplitCSProcessor : IFileProcessor
    {
        /// <summary>
        /// Gets the ID of this Processor
        /// </summary>
        public string ID { get { return "CoDSplitCSProcessor"; } }

        /// <summary>
        /// Gets the Name of this Processor
        /// </summary>
        public string Name { get { return "CoD Specular/Albedo (World War II)"; } }

        /// <summary>
        /// Processes the provided image
        /// </summary>
        /// <param name="file">File to process</param>
        /// <param name="config">Config with settings</param>
        public void Process(string file, FileProcessorConfig config)
        {
            if(!config.ViewModel.Extensions.Contains(Path.GetExtension(file).ToUpper()))
                return;

            var maskPath = Path.Combine(Path.GetDirectoryName(file), string.Join("_", Path.GetFileNameWithoutExtension(file).Substring(0, Path.GetFileNameWithoutExtension(file).LastIndexOf('_')).Remove(0, 4).Split(new string[] { "~" }, StringSplitOptions.None)[0]).Replace('~', '_').Replace('&', '_').Replace('$', '_').Replace('-', '_') + "_s" + Path.GetExtension(file));

            if (!File.Exists(maskPath))
                throw new ArgumentException("Failed to locate mask image for CoDSplitCSProcessor", "maskPath");

            using (var inputImage   = new ScratchImage(file))
            using (var maskImage    = new ScratchImage(maskPath))
            {
                var ext = config.GetValue("Extension", ".PNG");
                var dxgi = config.GetValue("DXGIFormat", 77);
                var outputPath = config.GetValue("OutputPath", "");

                if (string.IsNullOrWhiteSpace(outputPath))
                    outputPath = Path.Combine(Path.GetDirectoryName(file), string.Join("_", Path.GetFileNameWithoutExtension(file).Substring(0, Path.GetFileNameWithoutExtension(file).LastIndexOf('_')).Remove(0, 4).Split(new string[] { "~" }, StringSplitOptions.None)[0]).Replace('~', '_').Replace('&', '_').Replace('$', '_').Replace('-', '_'));

                // Force the image to a standard format
                inputImage.ConvertImage(ScratchImage.DXGIFormat.R8G8B8A8UNORM);
                maskImage.ConvertImage(ScratchImage.DXGIFormat.R8G8B8A8UNORM);

                // Force mask image size
                maskImage.Resize(inputImage.Width, inputImage.Height);

                const float insulatorSpecRange = 0.1f;

                using (var cMap = new ScratchImage(inputImage.Metadata))
                using (var sMap = new ScratchImage(inputImage.Metadata))
                {
                    for (int x = 0; x < inputImage.Width; x++)
                    {
                        for (int y = 0; y < inputImage.Height; y++)
                        {
                            // Get Pixel
                            var pixel = inputImage.GetPixel(0, 0, 0, x, y);
                            var maskPixel = maskImage.GetPixel(0, 0, 0, x, y);

                            // Compute Metal/Diffuse Mask Values
                            var m = MathUtilities.Clamp(maskPixel.X - insulatorSpecRange, 1.0f, 0.0f) * (1.0f / (1.0f - insulatorSpecRange));
                            var d = MathUtilities.Clamp(1.0f - m, 1.0f, 0.0f);
                            var r = Math.Min(maskPixel.W, insulatorSpecRange);

                            // Set pixels, clamped to 56/56/56
                            cMap.SetPixel(0, 0, 0, x, y, new Vector4(pixel.X * d, pixel.Y * d, pixel.Z * d, pixel.W));
                            sMap.SetPixel(0, 0, 0, x, y, new Vector4(Math.Max(r + m * pixel.X, 0.21f), Math.Max(r + m * pixel.Y, 0.21f), Math.Max(r + m * pixel.Z, 0.21f), 1.0f));
                        }
                    }

                    // Convert to desired DXGI format for DDS
                    if(ext == ".DDS")
                    {
                        cMap.ConvertImage((ScratchImage.DXGIFormat)dxgi);
                        sMap.ConvertImage((ScratchImage.DXGIFormat)dxgi);
                    }

                    cMap.Save(outputPath + "_c" + ext);
                    sMap.Save(outputPath + "_s" + ext);
                }
            }
        }

        /// <summary>
        /// Checks if we can process this file, this is used by the Automatic Processor and does not affect manually selected modes
        /// </summary>
        /// <param name="file">File to process</param>
        /// <param name="config">Config with settings</param>
        /// <returns>True if we can, otherwise False</returns>
        public bool CanProcessFile(string file, FileProcessorConfig config)
        {
            if(!config.ViewModel.Extensions.Contains(Path.GetExtension(file).ToUpper()))
                return false;

            return false;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            return Name;
        }
    }
}